#!/bin/bash

usage()
{
    echo $program: invocation error >&2
    exit 1
}

me="&contact=pgf@foxharp.boston.ma.us"

# doit=echo

program=${0##*/}

: args: $*


urlencode()
{
    sed -e 's/"/%22/g' \
	-e 's/\//%2F/g' \
	-e 's/\./%2E/g' \
	-e 's/,/%2C/g' \
	-e 's/:/%3A/g' \
	-e 's/;/%3B/g' \
	-e 's/</%3C/g' \
	-e 's/>/%3E/g' \
	-e 's/(/%28/g' \
	-e 's/)/%29/g' \
	-e 's/ /%20/g' \
	-e 's/\&/%26/g'
}

make_url()
{
    #meta=" meta"   # include metadata
    query="(node($bbox);<;>;);out$meta;"
    server=overpass-api.de/api/interpreter
    echo http://$server?data=$(echo "$query" | urlencode)
}


if ! opts="$(getopt -o b:B:x:f \
	-l bits:,bbox:,xmlfile:,force -n $program -- $@)"
then
    usage
fi

eval set -- "$opts"

xmlfile="-"
force=;

while true
do
    : \$1 is $1
    case $1 in
	-b|--bits) bits=$2; shift 2 ;;
	-B|--bbox) bbox=$2; shift 2 ;;
	-x|--xmlfile) xmlfile=$2; shift 2 ;;
	-f|--force) force=yes; shift 1 ;;
	--) shift; break ;;
	*) usage ;;
    esac
done

#bbox="[bbox=$bbox]"

trap "rm -f $xmlfile.tmp" 0

if [ ! "$force" -a -e $xmlfile ]
then
    echo Already have $xmlfile
    exit
fi
if [  ! "$force" -a -e ${xmlfile%.gz} ]
then
    echo Already have uncompressed $xmlfile
    exit
fi

# normally the .osm.gz files are stored alongside the .rdm files.
# but for development, it can be convenient to be able to get the .osm from
# somewhere else on the local system.
#localstore=/usr/local/share/roadmap/newquads

# isolate the qt19/.../file.osm.gz partial path
wantqtpath=qt$bits/${xmlfile##*/qt$bits}

if [ -e "$localstore/$wantqtpath" ]
then
    mkdir -p $(dirname $xmlfile)
    cp $localstore/$wantqtpath $xmlfile
    exit
fi

# okay... we need to get it from the web.
# one or two more layers of caching would be nice here -- a web
# cache of .osm.gz files is an obvious thing (to avoid all the
# clipping and slow transfer from the OSM servers), and maybe
# even a web store of .rdm files -- but that should really be
# checked long before we get to this point.

case $xmlfile in
*.gz) want_compressed=1 ;;
esac

url=$(make_url)
echo "Fetching from $url"

if [ "$want_compressed" ]
then
    wget_opt="--header=Accept-Encoding: gzip"
    if wget "$wget_opt" -O - "$url" >$xmlfile.tmp || exit 1
    then
	case $(file $xmlfile.tmp) in
	*gzip*)
	    mv $xmlfile.tmp $xmlfile
	    ;;
	*)
	    echo "Note: download didn't use gzip encoding."
	    echo "Compressing now..."
	    gzip -c -d $xmlfile.tmp > $xmlfile || exit 1
	    ;;
	esac
    fi
else
    if wget $wget_opt -O - "$url" >$xmlfile.tmp || exit 1
    then
	mv $xmlfile.tmp $xmlfile
    fi
fi

